package com.amaze.filemanager.ui.dialogs;

import static android.view.View.INVISIBLE;
import static android.view.View.VISIBLE;
import static androidx.core.text.HtmlCompat.FROM_HTML_MODE_COMPACT;
import static com.amaze.filemanager.asynchronous.services.EncryptService.TAG_AESCRYPT;
import static com.amaze.filemanager.asynchronous.services.EncryptService.TAG_ENCRYPT_TARGET;
import static com.amaze.filemanager.asynchronous.services.EncryptService.TAG_PASSWORD;
import static com.amaze.filemanager.filesystem.files.CryptUtil.AESCRYPT_EXTENSION;
import static com.amaze.filemanager.filesystem.files.CryptUtil.CRYPT_EXTENSION;
import static com.amaze.filemanager.ui.fragments.preferencefragments.PreferencesConstants.PREFERENCE_CRYPT_WARNING_REMEMBER;
import static com.amaze.filemanager.ui.views.WarnableTextInputValidator.ReturnState.STATE_ERROR;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.INVISIBLE;
import android.view.View.VISIBLE;
import android.widget.CompoundButton;
import android.widget.Toast;
import androidx.appcompat.widget.AppCompatCheckBox;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.core.text.HtmlCompat;
import androidx.core.text.HtmlCompat.FROM_HTML_MODE_COMPACT;
import androidx.preference.PreferenceManager;
import com.afollestad.materialdialogs.DialogAction;
import com.afollestad.materialdialogs.MaterialDialog;
import com.afollestad.materialdialogs.internal.MDButton;
import com.amaze.filemanager.R;
import com.amaze.filemanager.asynchronous.services.EncryptService;
import com.amaze.filemanager.databinding.DialogEncryptAuthenticateBinding;
import com.amaze.filemanager.filesystem.HybridFileParcelable;
import com.amaze.filemanager.filesystem.files.EncryptDecryptUtils;
import com.amaze.filemanager.ui.activities.MainActivity;
import com.amaze.filemanager.ui.theme.AppTheme;
import com.amaze.filemanager.ui.views.WarnableTextInputLayout;
import com.amaze.filemanager.ui.views.WarnableTextInputValidator;
import com.google.android.material.textfield.TextInputEditText;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.concurrent.Callable;

public class EncryptAuthenticateDialog {

    private static final Logger log = LoggerFactory.getLogger(EncryptAuthenticateDialog.class);

    @SuppressLint("SetTextI18n")
    public static void show(
            Context context,
            Intent intent,
            MainActivity main,
            AppTheme appTheme,
            EncryptDecryptUtils.EncryptButtonCallbackInterface encryptButtonCallbackInterface)
            throws GeneralSecurityException, IOException {

        HybridFileParcelable file = intent.getParcelableExtra(EncryptService.TAG_SOURCE);
        if (file != null) {
            SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);
            int accentColor = main.getAccent();
            MaterialDialog.Builder builder = new MaterialDialog.Builder(context);
            builder.title(main.getString(R.string.crypt_encrypt));
            DialogEncryptAuthenticateBinding vb = DialogEncryptAuthenticateBinding.inflate(LayoutInflater.from(context));
            View rootView = vb.getRoot();
            TextInputEditText passwordEditText = vb.getEditTextDialogEncryptPassword();
            TextInputEditText passwordConfirmEditText = vb.getEditTextDialogEncryptPasswordConfirm();
            TextInputEditText encryptSaveAsEditText = vb.getEditTextEncryptSaveAs();
            AppCompatCheckBox useAzeEncrypt = vb.getCheckboxUseAze();
            AppCompatTextView usageTextInfo = vb.getTextViewCryptInfo();

            usageTextInfo.setText(HtmlCompat.fromHtml(
                    main.getString(R.string.encrypt_option_use_aescrypt_desc),
                    FROM_HTML_MODE_COMPACT
            ));
            useAzeEncrypt.setOnCheckedChangeListener(createUseAzeEncryptCheckboxOnCheckedChangeListener(
                    context,
                    file,
                    preferences,
                    main,
                    encryptSaveAsEditText,
                    usageTextInfo
            ));
            WarnableTextInputLayout textInputLayoutPassword = vb.getTilEncryptPassword();
            WarnableTextInputLayout textInputLayoutPasswordConfirm = vb.getTilEncryptPasswordConfirm();
            WarnableTextInputLayout textInputLayoutEncryptSaveAs = vb.getTilEncryptSaveAs();
            encryptSaveAsEditText.setText(file.getName(context) + AESCRYPT_EXTENSION);
            textInputLayoutEncryptSaveAs.setHint(file.isDirectory() ?
                    context.getString(R.string.encrypt_folder_save_as) :
                    context.getString(R.string.encrypt_file_save_as)
            );
            builder.customView(rootView, true)
                    .positiveText(context.getString(R.string.ok))
                    .negativeText(context.getString(R.string.cancel))
                    .theme(appTheme.getMaterialDialogTheme(context))
                    .positiveColor(accentColor)
                    .negativeColor(accentColor)
                    .autoDismiss(false)
                    .onNegative((dialog, which) -> dialog.cancel())
                    .onPositive((dialog, which) -> {
                        intent.putExtra(TAG_ENCRYPT_TARGET, encryptSaveAsEditText.getText().toString())
                                .putExtra(TAG_AESCRYPT, !useAzeEncrypt.isChecked())
                                .putExtra(TAG_PASSWORD, passwordEditText.getText().toString());
                        try {
                            encryptButtonCallbackInterface.onButtonPressed(intent, passwordEditText.getText().toString());
                        } catch (Exception e) {
                            log.error("Failed to encrypt", e);
                            Toast.makeText(context, context.getString(R.string.crypt_encryption_fail), Toast.LENGTH_LONG).show();
                        } finally {
                            dialog.dismiss();
                        }
                    });
            MaterialDialog dialog = builder.show();
            MDButton btnOK = dialog.getActionButton(DialogAction.POSITIVE);
            btnOK.setEnabled(false);
            rootView.post(() -> passwordEditText.openKeyboard(main.getApplicationContext()));
            createPasswordFieldValidator(
                    context,
                    passwordEditText,
                    passwordConfirmEditText,
                    textInputLayoutPassword,
                    encryptSaveAsEditText,
                    useAzeEncrypt,
                    btnOK
            );
            createPasswordFieldValidator(
                    context,
                    passwordConfirmEditText,
                    passwordEditText,
                    textInputLayoutPasswordConfirm,
                    encryptSaveAsEditText,
                    useAzeEncrypt,
                    btnOK
            );
            new WarnableTextInputValidator(
                    context,
                    encryptSaveAsEditText,
                    textInputLayoutEncryptSaveAs,
                    btnOK,
                    createFilenameValidator(useAzeEncrypt, () -> {
                        return passwordEditText.getText() != null &&
                                !TextUtils.isEmpty(passwordEditText.getText().toString()) &&
                                passwordEditText.getText().toString().equals(passwordConfirmEditText.getText().toString());
                    })
            );
        } else {
            throw new IllegalArgumentException("No TAG_SOURCE parameter specified");
        }
    }

    private static WarnableTextInputValidator.OnTextValidate createPasswordFieldValidator(
            Context context,
            TextInputEditText passwordField,
            TextInputEditText comparingPasswordField,
            WarnableTextInputLayout warningTextInputLayout,
            TextInputEditText encryptSaveAsEditText,
            AppCompatCheckBox useAzeEncrypt,
            MDButton btnOK) {

        return text -> {
            if (text != null && !text.trim().isEmpty() &&
                    text.equals(comparingPasswordField.getText().toString()) &&
                    filenameIsValid(encryptSaveAsEditText.getText().toString(), useAzeEncrypt)) {
                return new WarnableTextInputValidator.ReturnState();
            } else if (text != null && text.trim().isEmpty()) {
                return new WarnableTextInputValidator.ReturnState(STATE_ERROR, R.string.field_empty);
            } else {
                return new WarnableTextInputValidator.ReturnState(STATE_ERROR, R.string.password_no_match);
            }
        };
    }

    @SuppressLint("SetTextI18n")
    public static CompoundButton.OnCheckedChangeListener createUseAzeEncryptCheckboxOnCheckedChangeListener(
            Context context,
            HybridFileParcelable file,
            SharedPreferences preferences,
            MainActivity main,
            TextInputEditText encryptSaveAsEditText,
            AppCompatTextView usageTextInfo) {

        return (buttonView, isChecked) -> {
            if (isChecked && !preferences.getBoolean(PREFERENCE_CRYPT_WARNING_REMEMBER, false)) {
                EncryptWarningDialog.show(main, main.getAppTheme());
            }
            encryptSaveAsEditText.setText(file.getName(context) + (isChecked ? CRYPT_EXTENSION : AESCRYPT_EXTENSION));
            usageTextInfo.setText(HtmlCompat.fromHtml(
                    main.getString(isChecked ? R.string.encrypt_option_use_azecrypt_desc : R.string.encrypt_option_use_aescrypt_desc),
                    FROM_HTML_MODE_COMPACT
            ));
        };
    }

    public static WarnableTextInputValidator.OnTextValidate createFilenameValidator(
            AppCompatCheckBox useAzeEncrypt,
            Callable<Boolean> extraCondition) {

        return text -> {
            try {
                if (text != null && text.trim().length() > 0 && filenameIsValid(text, useAzeEncrypt) && extraCondition.call()) {
                    return new WarnableTextInputValidator.ReturnState();
                } else if (text != null && text.trim().isEmpty()) {
                    return new WarnableTextInputValidator.ReturnState(STATE_ERROR, R.string.field_empty);
                } else if (text != null && !text.endsWith(CRYPT_EXTENSION) &&
                        (useAzeEncrypt.getVisibility() == INVISIBLE || useAzeEncrypt.isChecked())) {
                    return new WarnableTextInputValidator.ReturnState(STATE_ERROR, R.string.encrypt_file_must_end_with_aze);
                } else if (text != null && !text.endsWith(AESCRYPT_EXTENSION) &&
                        useAzeEncrypt.getVisibility() == VISIBLE && !useAzeEncrypt.isChecked()) {
                    return new WarnableTextInputValidator.ReturnState(STATE_ERROR, R.string.encrypt_file_must_end_with_aes);
                } else {
                    return new WarnableTextInputValidator.ReturnState(STATE_ERROR, R.string.empty_string);
                }
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        };
    }

    public static boolean filenameIsValid(String filename, AppCompatCheckBox useAzeEncrypt) {
        return (filename != null && filename.trim().length() > 0 && filename.endsWith(CRYPT_EXTENSION) &&
                (useAzeEncrypt.getVisibility() == INVISIBLE || useAzeEncrypt.isChecked())) ||
                (filename != null && filename.trim().length() > 0 && filename.endsWith(AESCRYPT_EXTENSION) &&
                        useAzeEncrypt.getVisibility() == VISIBLE && !useAzeEncrypt.isChecked());
    }
}
